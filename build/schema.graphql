# Pool/Strategy
#     distributionMetadata
#     useRegistryAnchor
#     metadataRequired
#     distributionStarted
#     registrationStartTime
#     registrationEndTime
#     allocationStartTime
#     allocationEndTime
#     totalPayoutAmount
#     recipientsCounter
#     merkleRoot


# Allocation
#     id
#     sender
#     recipient
#     token
#     amount

# Recipient
#   id
#   useRegistryAnchor
#   address recipientAddress
#   statusIndex
#   Status status
#   Metadata metadata
#   Claim[] claims
#   allocations[] 
  
# Allocator
#     id (sender address?)
#     Allocation[]
  
# Claim
#   id
#   token
#   amount
  
  
# Distribution  
#   id
#   recipientId
#   amount
#   proof?

type Pool @entity {
  id: ID!
  distributionMetadata: String! # string
  useRegistryAnchor: Boolean! # bool
  metadataRequired: Boolean! # bool
  distributionStarted: Boolean! # bool
  registrationStartTime: BigInt! # uint256
  registrationEndTime: BigInt! # uint256
  allocationStartTime: BigInt! # uint256
  allocationEndTime: BigInt! # uint256
  totalPayoutAmount: BigInt! # uint256
  recipientsCounter: BigInt! # uint256
  merkleRoot: Bytes! # bytes32
  allocations: [Allocation!]! @derivedFrom(field: "pool")
  recipients: [Recipient!]! @derivedFrom(field: "pool")
  allocator: Allocator! @derivedFrom(field: "pool")
}


type Allocation @entity {
  id: ID!
  pool: Pool!
  sender: Allocator! # address
  recipient: Recipient! # address
  token: Bytes! # address
  amount: BigInt! # uint256
}

# id: recipientId.toHex()
type Recipient @entity {
  id: ID!
  pool: Pool!
  useRegistryAnchor: Boolean! # bool
  recipientId: Bytes! # address
  recipientAddress: Bytes! # address
  statusIndex: BigInt! # uint256
  status: Status! @derivedFrom(field: "recipient")
  metadata: Metadata! @derivedFrom(field: "recipient")
  claims: [Claim!]! @derivedFrom(field: "recipient")
  allocations: [Allocation!]! @derivedFrom(field: "recipient")
}

type Allocator @entity {
  id: ID!
  pool: Pool!
  allocations: [Allocation!]! @derivedFrom(field: "sender")
}

type Claim @entity {
  id: ID!
  recipient: Recipient!
  token: Bytes! # address
  amount: BigInt! # uint256
}

type Status @entity {
  id: ID!
  recipient: Recipient!
  rowIndex: BigInt! # uint256
  fullRow: BigInt! # uint256
}

type Metadata @entity {
  id: ID!
  recipient: Recipient!
  data: Bytes! # bytes
}

type Distribution @entity {
  id: ID!
  recipient: Recipient!
  amount: BigInt! # uint256
  proof: Bytes! # bytes
}

# id: recipientId.toHex()
type Allocated @entity(immutable: true) {
  id: ID!
  recipientId: Bytes! # address
  amount: BigInt! # uint256
  token: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: recipientId.toHex()
type Appealed @entity(immutable: true) {
  id: ID!
  recipientId: Bytes! # address
  data: Bytes! # bytes
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: sender.toHex()
type BatchPayoutSuccessful @entity(immutable: true) {
  id: ID!
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: recipientId.toHex()
type Claimed @entity(immutable: true) {
  id: ID!
  recipientId: Bytes! # address
  recipientAddress: Bytes! # address
  amount: BigInt! # uint256
  token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: recipientId.toHex()
type Distributed @entity(immutable: true) {
  id: ID!
  recipientId: Bytes! # address
  recipientAddress: Bytes! # address
  amount: BigInt! # uint256
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: event.transaction.hash.concatI32(event.logIndex.toI32()).toHex()
type DistributionUpdated @entity(immutable: true) {
  id: ID!
  merkleRoot: Bytes! # bytes32
  metadata_protocol: BigInt! # uint256
  metadata_pointer: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: recipientId.toHex()
type FundsDistributed @entity(immutable: true) {
  id: ID!
  amount: BigInt! # uint256
  grantee: Bytes! # address
  token: Bytes! # address
  recipientId: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: profileId.toHex()
type Initialized @entity(immutable: true) {
  id: ID!
  allo: Bytes! # address
  profileId: Bytes! # bytes32
  poolId: BigInt! # uint256
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: event.transaction.hash.concatI32(event.logIndex.toI32()).toHex()
type PoolActive @entity(immutable: true) {
  id: ID!
  active: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: sender.toHex()
type RecipientStatusUpdated @entity(immutable: true) {
  id: ID!
  rowIndex: BigInt! # uint256
  fullRow: BigInt! # uint256
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: recipientId.toHex()
type Registered @entity(immutable: true) {
  id: ID!
  recipientId: Bytes! # address
  data: Bytes! # bytes
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# id: sender.toHex()
type TimestampsUpdated @entity(immutable: true) {
  id: ID!
  registrationStartTime: BigInt! # uint256
  registrationEndTime: BigInt! # uint256
  allocationStartTime: BigInt! # uint256
  allocationEndTime: BigInt! # uint256
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
